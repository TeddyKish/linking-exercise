Hello! In this exercise we're going to have some fun with declarations and definitions.

This program currently compiles fine ('gcc -Wall main.c').
Pay attention to main.cpp. It appears as if there are 2 #includes to "good_header.h". Suspicious...

1. Why does the program compile and run correctly, despite "good_header.h" not having include guards?
- Explain the difference between 'declaration' and 'definition' very clearly

2. Build using bad_main, e.g. 'gcc -Wall bad_main.c'. Does your program compile correctly? If not, why?

3. What is the crucial difference between "good_header.h" and "bad_header.h"? Which one is bad practice?

4. Can include guards be used to solve this specific scenario?

5. What is the best practice method to solve this issue?