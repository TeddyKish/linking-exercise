1. Why does the program compile and run correctly, despite "good_header.h" not having include guards?
- A declaration introduces a named identifier to the scope of the translation unit. 
  Declaration of the same identifier may appear an indefinite amount of times.
  A definition implements a known identifier. A definition of an identifer must appear once throughout the whole program.

2. Build using bad_main, e.g. 'gcc -Wall bad_main.c ext.c'. Does your program compile correctly? If not, why?
  The program does not compile correctly because of multiple definitions of the print_name function.
  bad_header.h contains a definition of the function.
  Including it twice means that the TU will have 2 copies of implementations for the function.
  This triggers redefinition of the same identifier.

3. What is the crucial difference between "good_header.h" and "bad_header.h"? Which one is bad practice?
  The difference is that good_header contains a declaration of an identifier, whereas bad_header contains a definition of an identifier.
  bad_header is bad practice because you should generally implement functions within the source files, not the header files.
  This puts you in the risk of violating the ODR.

4. Can include guards be used to solve this specific scenario?
  Yes they can. This will ensure that bad_header is only included once, and thus there is only a single implementation.

5. What is the best practice method to solve this issue?
  Define the function in a source file, and put its declaration in a header file.